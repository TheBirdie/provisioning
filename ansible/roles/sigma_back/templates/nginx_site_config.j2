upstream {{ project_name }}_{{ application_module }}_wsgi_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ virtualenv_path }}/run/gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name "_";
    root {{ sigma_front_dir }}/dist/prod;
    index index.html;

    client_max_body_size 4G;

    access_log {{ nginx_access_log_file }};
    error_log {{ nginx_error_log_file }};

    # Backend config
    location /static/ {
        alias   {{ nginx_static_dir }};
    }
    location /media/ {
        alias   {{ nginx_media_dir }};
    }
    location = /api {
        return 302 /api/;
    }
    location /api/ {
        if (-f {{ virtualenv_path }}/maintenance_on.html) {
            return 503;
        }
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header Host $http_host;
        proxy_redirect off;
        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        rewrite ^/api(.*)$ $1 break;
        proxy_pass http://{{ project_name }}_{{ application_module }}_wsgi_server;
    }
}
